use super::addressing_mode::AddressingMode::{self, *};
use super::instruction::Instruction::{self, *};

pub struct OpCode {
    pub instruction: Instruction,
    pub addressing_mode: AddressingMode,
    pub size: u8,
    pub cycles: u8,
}

const fn oc(instruction: Instruction, addressing_mode: AddressingMode, cycles: u8) -> OpCode {
    let size = match addressing_mode {
        Implied => 1,
        Branch => 2,
        Immediate => 2,
        ZeroPage => 2,
        ZeroPageX => 2,
        ZeroPageY => 2,
        IndexedIndirectX => 2,
        IndirectIndexedY => 2,
        Indirect => 3,
        Absolute => 3,
        AbsoluteX => 3,
        AbsoluteY => 3,
    };

    OpCode {
        instruction,
        addressing_mode,
        size,
        cycles,
    }
}

const fn kil() -> OpCode {
    OpCode {
        instruction: KIL,
        addressing_mode: Implied,
        size: 1,
        cycles: 0,
    }
}

pub static OPCODES: [OpCode; 256] = [
    /* 0x00 */ oc(BRK, Implied, 7),
    /* 0x01 */ oc(ORA, IndexedIndirectX, 6),
    /* 0x02 */ kil(),
    /* 0x03 */ kil(),
    /* 0x04 */ kil(),
    /* 0x05 */ oc(ORA, ZeroPage, 3),
    /* 0x06 */ oc(ASL, ZeroPage, 5),
    /* 0x07 */ kil(),
    /* 0x08 */ oc(PHP, Implied, 3),
    /* 0x09 */ oc(ORA, Immediate, 2),
    /* 0x0a */ oc(ASL, Implied, 2),
    /* 0x0b */ kil(),
    /* 0x0c */ kil(),
    /* 0x0d */ oc(ORA, Absolute, 4),
    /* 0x0e */ oc(ASL, Absolute, 6),
    /* 0x0f */ kil(),
    /* 0x10 */ oc(BPL, Branch, 2),
    /* 0x11 */ oc(ORA, IndirectIndexedY, 5),
    /* 0x12 */ kil(),
    /* 0x13 */ kil(),
    /* 0x14 */ kil(),
    /* 0x15 */ oc(ORA, ZeroPageX, 4),
    /* 0x16 */ oc(ASL, ZeroPageX, 6),
    /* 0x17 */ kil(),
    /* 0x18 */ oc(CLC, Implied, 2),
    /* 0x19 */ oc(ORA, AbsoluteY, 4),
    /* 0x1a */ kil(),
    /* 0x1b */ kil(),
    /* 0x1c */ kil(),
    /* 0x1d */ oc(ORA, AbsoluteX, 4),
    /* 0x1e */ oc(ASL, AbsoluteX, 7),
    /* 0x1f */ kil(),
    /* 0x20 */ oc(JSR, Absolute, 6),
    /* 0x21 */ oc(AND, IndexedIndirectX, 6),
    /* 0x22 */ kil(),
    /* 0x23 */ kil(),
    /* 0x24 */ oc(BIT, ZeroPage, 3),
    /* 0x25 */ oc(AND, ZeroPage, 3),
    /* 0x26 */ oc(ROL, ZeroPage, 5),
    /* 0x27 */ kil(),
    /* 0x28 */ oc(PLP, Implied, 4),
    /* 0x29 */ oc(AND, Immediate, 2),
    /* 0x2a */ oc(ROL, Implied, 2),
    /* 0x2b */ kil(),
    /* 0x2c */ oc(BIT, Absolute, 4),
    /* 0x2d */ oc(AND, Absolute, 4),
    /* 0x2e */ oc(ROL, Absolute, 6),
    /* 0x2f */ kil(),
    /* 0x30 */ oc(BMI, Branch, 2),
    /* 0x31 */ oc(AND, IndirectIndexedY, 5),
    /* 0x32 */ kil(),
    /* 0x33 */ kil(),
    /* 0x34 */ kil(),
    /* 0x35 */ oc(AND, ZeroPageX, 4),
    /* 0x36 */ oc(ROL, ZeroPageX, 6),
    /* 0x37 */ kil(),
    /* 0x38 */ oc(SEC, Implied, 2),
    /* 0x39 */ oc(AND, AbsoluteY, 4),
    /* 0x3a */ kil(),
    /* 0x3b */ kil(),
    /* 0x3c */ kil(),
    /* 0x3d */ oc(AND, AbsoluteX, 4),
    /* 0x3e */ oc(ROL, AbsoluteX, 7),
    /* 0x3f */ kil(),
    /* 0x40 */ oc(RTI, Implied, 6),
    /* 0x41 */ oc(EOR, IndexedIndirectX, 6),
    /* 0x42 */ kil(),
    /* 0x43 */ kil(),
    /* 0x44 */ kil(),
    /* 0x45 */ oc(EOR, ZeroPage, 3),
    /* 0x46 */ oc(LSR, ZeroPage, 5),
    /* 0x47 */ kil(),
    /* 0x48 */ oc(PHA, Implied, 3),
    /* 0x49 */ oc(EOR, Immediate, 2),
    /* 0x4a */ oc(LSR, Implied, 2),
    /* 0x4b */ kil(),
    /* 0x4c */ oc(JMP, Absolute, 3),
    /* 0x4d */ oc(EOR, Absolute, 4),
    /* 0x4e */ oc(LSR, Absolute, 6),
    /* 0x4f */ kil(),
    /* 0x50 */ oc(BVC, Branch, 2),
    /* 0x51 */ oc(EOR, IndirectIndexedY, 5),
    /* 0x52 */ kil(),
    /* 0x53 */ kil(),
    /* 0x54 */ kil(),
    /* 0x55 */ oc(EOR, ZeroPageX, 4),
    /* 0x56 */ oc(LSR, ZeroPageX, 6),
    /* 0x57 */ kil(),
    /* 0x58 */ oc(CLI, Implied, 2),
    /* 0x59 */ oc(EOR, AbsoluteY, 4),
    /* 0x5a */ kil(),
    /* 0x5b */ kil(),
    /* 0x5c */ kil(),
    /* 0x5d */ oc(EOR, AbsoluteX, 4),
    /* 0x5e */ oc(LSR, AbsoluteX, 7),
    /* 0x5f */ kil(),
    /* 0x60 */ oc(RTS, Implied, 6),
    /* 0x61 */ oc(ADC, IndexedIndirectX, 6),
    /* 0x62 */ kil(),
    /* 0x63 */ kil(),
    /* 0x64 */ kil(),
    /* 0x65 */ oc(ADC, ZeroPage, 3),
    /* 0x66 */ oc(ROR, ZeroPage, 5),
    /* 0x67 */ kil(),
    /* 0x68 */ oc(PLA, Implied, 4),
    /* 0x69 */ oc(ADC, Immediate, 2),
    /* 0x6a */ oc(ROR, Implied, 2),
    /* 0x6b */ kil(),
    /* 0x6c */ oc(JMP, Indirect, 5),
    /* 0x6d */ oc(ADC, Absolute, 4),
    /* 0x6e */ oc(ROR, Absolute, 6),
    /* 0x6f */ kil(),
    /* 0x70 */ oc(BVS, Branch, 2),
    /* 0x71 */ oc(ADC, IndirectIndexedY, 5),
    /* 0x72 */ kil(),
    /* 0x73 */ kil(),
    /* 0x74 */ kil(),
    /* 0x75 */ oc(ADC, ZeroPageX, 4),
    /* 0x76 */ oc(ROR, ZeroPageX, 6),
    /* 0x77 */ kil(),
    /* 0x78 */ oc(SEI, Implied, 2),
    /* 0x79 */ oc(ADC, AbsoluteY, 4),
    /* 0x7a */ kil(),
    /* 0x7b */ kil(),
    /* 0x7c */ kil(),
    /* 0x7d */ oc(ADC, AbsoluteX, 4),
    /* 0x7e */ oc(ROR, AbsoluteX, 7),
    /* 0x7f */ kil(),
    /* 0x80 */ kil(),
    /* 0x81 */ oc(STA, IndexedIndirectX, 6),
    /* 0x82 */ kil(),
    /* 0x83 */ kil(),
    /* 0x84 */ oc(STY, ZeroPage, 3),
    /* 0x85 */ oc(STA, ZeroPage, 3),
    /* 0x86 */ oc(STX, ZeroPage, 3),
    /* 0x87 */ kil(),
    /* 0x88 */ oc(DEY, Implied, 2),
    /* 0x89 */ kil(),
    /* 0x8a */ oc(TXA, Implied, 2),
    /* 0x8b */ kil(),
    /* 0x8c */ oc(STY, Absolute, 4),
    /* 0x8d */ oc(STA, Absolute, 4),
    /* 0x8e */ oc(STX, Absolute, 4),
    /* 0x8f */ kil(),
    /* 0x90 */ oc(BCC, Branch, 2),
    /* 0x91 */ oc(STA, IndirectIndexedY, 6),
    /* 0x92 */ kil(),
    /* 0x93 */ kil(),
    /* 0x94 */ oc(STY, ZeroPageX, 4),
    /* 0x95 */ oc(STA, ZeroPageX, 4),
    /* 0x96 */ oc(STX, ZeroPageY, 4),
    /* 0x97 */ kil(),
    /* 0x98 */ oc(TYA, Implied, 2),
    /* 0x99 */ oc(STA, AbsoluteY, 5),
    /* 0x9a */ oc(TXS, Implied, 2),
    /* 0x9b */ kil(),
    /* 0x9c */ kil(),
    /* 0x9d */ oc(STA, AbsoluteX, 5),
    /* 0x9e */ kil(),
    /* 0x9f */ kil(),
    /* 0xa0 */ oc(LDY, Immediate, 2),
    /* 0xa1 */ oc(LDA, IndexedIndirectX, 6),
    /* 0xa2 */ oc(LDX, Immediate, 2),
    /* 0xa3 */ kil(),
    /* 0xa4 */ oc(LDY, ZeroPage, 3),
    /* 0xa5 */ oc(LDA, ZeroPage, 3),
    /* 0xa6 */ oc(LDX, ZeroPage, 3),
    /* 0xa7 */ kil(),
    /* 0xa8 */ oc(TAY, Implied, 2),
    /* 0xa9 */ oc(LDA, Immediate, 2),
    /* 0xaa */ oc(TAX, Implied, 2),
    /* 0xab */ kil(),
    /* 0xac */ oc(LDY, Absolute, 4),
    /* 0xad */ oc(LDA, Absolute, 4),
    /* 0xae */ oc(LDX, Absolute, 4),
    /* 0xaf */ kil(),
    /* 0xb0 */ oc(BCS, Branch, 2),
    /* 0xb1 */ oc(LDA, IndirectIndexedY, 5),
    /* 0xb2 */ kil(),
    /* 0xb3 */ kil(),
    /* 0xb4 */ oc(LDY, ZeroPageX, 4),
    /* 0xb5 */ oc(LDA, ZeroPageX, 4),
    /* 0xb6 */ oc(LDX, ZeroPageY, 4),
    /* 0xb7 */ kil(),
    /* 0xb8 */ oc(CLV, Implied, 2),
    /* 0xb9 */ oc(LDA, AbsoluteY, 4),
    /* 0xba */ oc(TSX, Implied, 2),
    /* 0xbb */ kil(),
    /* 0xbc */ oc(LDY, AbsoluteX, 4),
    /* 0xbd */ oc(LDA, AbsoluteX, 4),
    /* 0xbe */ oc(LDX, AbsoluteY, 4),
    /* 0xbf */ kil(),
    /* 0xc0 */ oc(CPY, Immediate, 2),
    /* 0xc1 */ oc(CMP, IndexedIndirectX, 6),
    /* 0xc2 */ kil(),
    /* 0xc3 */ kil(),
    /* 0xc4 */ oc(CPY, ZeroPage, 3),
    /* 0xc5 */ oc(CMP, ZeroPage, 3),
    /* 0xc6 */ oc(DEC, ZeroPage, 5),
    /* 0xc7 */ kil(),
    /* 0xc8 */ oc(INY, Implied, 2),
    /* 0xc9 */ oc(CMP, Immediate, 2),
    /* 0xca */ oc(DEX, Implied, 2),
    /* 0xcb */ kil(),
    /* 0xcc */ oc(CPY, Absolute, 4),
    /* 0xcd */ oc(CMP, Absolute, 4),
    /* 0xce */ oc(DEC, Absolute, 6),
    /* 0xcf */ kil(),
    /* 0xd0 */ oc(BNE, Branch, 2),
    /* 0xd1 */ oc(CMP, IndirectIndexedY, 5),
    /* 0xd2 */ kil(),
    /* 0xd3 */ kil(),
    /* 0xd4 */ kil(),
    /* 0xd5 */ oc(CMP, ZeroPageX, 4),
    /* 0xd6 */ oc(DEC, ZeroPageX, 6),
    /* 0xd7 */ kil(),
    /* 0xd8 */ oc(CLD, Implied, 2),
    /* 0xd9 */ oc(CMP, AbsoluteY, 4),
    /* 0xda */ kil(),
    /* 0xdb */ kil(),
    /* 0xdc */ kil(),
    /* 0xdd */ kil(),
    /* 0xde */ oc(CMP, AbsoluteX, 4),
    /* 0xdf */ oc(DEC, AbsoluteX, 7),
    /* 0xe0 */ oc(CPX, Immediate, 2),
    /* 0xe1 */ oc(SBC, IndexedIndirectX, 6),
    /* 0xe2 */ kil(),
    /* 0xe3 */ kil(),
    /* 0xe4 */ oc(CPX, ZeroPage, 3),
    /* 0xe5 */ oc(SBC, ZeroPage, 3),
    /* 0xe6 */ oc(INC, ZeroPage, 5),
    /* 0xe7 */ kil(),
    /* 0xe8 */ oc(INX, Implied, 2),
    /* 0xe9 */ oc(SBC, Immediate, 2),
    /* 0xea */ oc(NOP, Implied, 2),
    /* 0xeb */ kil(),
    /* 0xec */ oc(CPX, Absolute, 4),
    /* 0xed */ oc(SBC, Absolute, 4),
    /* 0xee */ oc(INC, Absolute, 6),
    /* 0xef */ kil(),
    /* 0xf0 */ oc(BEQ, Branch, 2),
    /* 0xf1 */ oc(SBC, IndirectIndexedY, 5),
    /* 0xf2 */ kil(),
    /* 0xf3 */ kil(),
    /* 0xf4 */ kil(),
    /* 0xf5 */ oc(SBC, ZeroPageX, 4),
    /* 0xf6 */ oc(INC, ZeroPageX, 6),
    /* 0xf7 */ kil(),
    /* 0xf8 */ oc(SED, Implied, 2),
    /* 0xf9 */ oc(SBC, AbsoluteY, 4),
    /* 0xfa */ kil(),
    /* 0xfb */ kil(),
    /* 0xfc */ kil(),
    /* 0xfd */ oc(SBC, AbsoluteX, 4),
    /* 0xfe */ oc(INC, AbsoluteX, 7),
    /* 0xff */ kil(),
];
