use super::addrmode::*;
use super::instruction::*;

pub struct OpCode<'a> {
    pub code: u8,
    pub instruction: &'a Instruction<'a>,
    pub addrmode: &'a AddrMode<'a>,
    pub size: u8,
    pub cycles: u8,
}

impl<'a> OpCode<'a> {
    pub fn matches(&self, instruction: &Instruction, addrmode: &AddrMode) -> bool {
        self.instruction == instruction && self.addrmode == addrmode
    }

    const fn new(code: u8, instruction: &'a Instruction, addrmode: &'a AddrMode, cycles: u8) -> OpCode<'a> {
        OpCode {
            code,
            size: addrmode.op_size + 1,
            addrmode,
            instruction,
            cycles,
        }
    }
}

pub fn find_opcode<'a, 'b>(instruction: &'a Instruction, addrmode: &AddrMode) -> Option<&'b OpCode<'b>> {
    OPCODES.iter().find(|oc| oc.matches(instruction, addrmode))
}

pub static OPCODES: [OpCode; 256] = [
    OpCode::new(0x00, &BRK, &IMPLIED, 7),
    OpCode::new(0x01, &ORA, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0x02, &KIL, &IMPLIED, 0),
    OpCode::new(0x03, &KIL, &IMPLIED, 0),
    OpCode::new(0x04, &KIL, &IMPLIED, 0),
    OpCode::new(0x05, &ORA, &ZERO_PAGE, 3),
    OpCode::new(0x06, &ASL, &ZERO_PAGE, 5),
    OpCode::new(0x07, &KIL, &IMPLIED, 0),
    OpCode::new(0x08, &PHP, &IMPLIED, 3),
    OpCode::new(0x09, &ORA, &IMMEDIATE, 2),
    OpCode::new(0x0a, &ASL, &IMPLIED, 2),
    OpCode::new(0x0b, &KIL, &IMPLIED, 0),
    OpCode::new(0x0c, &KIL, &IMPLIED, 0),
    OpCode::new(0x0d, &ORA, &ABSOLUTE, 4),
    OpCode::new(0x0e, &ASL, &ABSOLUTE, 6),
    OpCode::new(0x0f, &KIL, &IMPLIED, 0),
    OpCode::new(0x10, &BPL, &BRANCH, 2),
    OpCode::new(0x11, &ORA, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0x12, &KIL, &IMPLIED, 0),
    OpCode::new(0x13, &KIL, &IMPLIED, 0),
    OpCode::new(0x14, &KIL, &IMPLIED, 0),
    OpCode::new(0x15, &ORA, &ZERO_PAGE_X, 4),
    OpCode::new(0x16, &ASL, &ZERO_PAGE_X, 6),
    OpCode::new(0x17, &KIL, &IMPLIED, 0),
    OpCode::new(0x18, &CLC, &IMPLIED, 2),
    OpCode::new(0x19, &ORA, &ABSOLUTE_Y, 4),
    OpCode::new(0x1a, &KIL, &IMPLIED, 0),
    OpCode::new(0x1b, &KIL, &IMPLIED, 0),
    OpCode::new(0x1c, &KIL, &IMPLIED, 0),
    OpCode::new(0x1d, &ORA, &ABSOLUTE_X, 4),
    OpCode::new(0x1e, &ASL, &ABSOLUTE_X, 7),
    OpCode::new(0x1f, &KIL, &IMPLIED, 0),
    OpCode::new(0x20, &JSR, &ABSOLUTE, 6),
    OpCode::new(0x21, &AND, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0x22, &KIL, &IMPLIED, 0),
    OpCode::new(0x23, &KIL, &IMPLIED, 0),
    OpCode::new(0x24, &BIT, &ZERO_PAGE, 3),
    OpCode::new(0x25, &AND, &ZERO_PAGE, 3),
    OpCode::new(0x26, &ROL, &ZERO_PAGE, 5),
    OpCode::new(0x27, &KIL, &IMPLIED, 0),
    OpCode::new(0x28, &PLP, &IMPLIED, 4),
    OpCode::new(0x29, &AND, &IMMEDIATE, 2),
    OpCode::new(0x2a, &ROL, &IMPLIED, 2),
    OpCode::new(0x2b, &KIL, &IMPLIED, 0),
    OpCode::new(0x2c, &BIT, &ABSOLUTE, 4),
    OpCode::new(0x2d, &AND, &ABSOLUTE, 4),
    OpCode::new(0x2e, &ROL, &ABSOLUTE, 6),
    OpCode::new(0x2f, &KIL, &IMPLIED, 0),
    OpCode::new(0x30, &BMI, &BRANCH, 2),
    OpCode::new(0x31, &AND, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0x32, &KIL, &IMPLIED, 0),
    OpCode::new(0x33, &KIL, &IMPLIED, 0),
    OpCode::new(0x34, &KIL, &IMPLIED, 0),
    OpCode::new(0x35, &AND, &ZERO_PAGE_X, 4),
    OpCode::new(0x36, &ROL, &ZERO_PAGE_X, 6),
    OpCode::new(0x37, &KIL, &IMPLIED, 0),
    OpCode::new(0x38, &SEC, &IMPLIED, 2),
    OpCode::new(0x39, &AND, &ABSOLUTE_Y, 4),
    OpCode::new(0x3a, &KIL, &IMPLIED, 0),
    OpCode::new(0x3b, &KIL, &IMPLIED, 0),
    OpCode::new(0x3c, &KIL, &IMPLIED, 0),
    OpCode::new(0x3d, &AND, &ABSOLUTE_X, 4),
    OpCode::new(0x3e, &ROL, &ABSOLUTE_X, 7),
    OpCode::new(0x3f, &KIL, &IMPLIED, 0),
    OpCode::new(0x40, &RTI, &IMPLIED, 6),
    OpCode::new(0x41, &EOR, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0x42, &KIL, &IMPLIED, 0),
    OpCode::new(0x43, &KIL, &IMPLIED, 0),
    OpCode::new(0x44, &KIL, &IMPLIED, 0),
    OpCode::new(0x45, &EOR, &ZERO_PAGE, 3),
    OpCode::new(0x46, &LSR, &ZERO_PAGE, 5),
    OpCode::new(0x47, &KIL, &IMPLIED, 0),
    OpCode::new(0x48, &PHA, &IMPLIED, 3),
    OpCode::new(0x49, &EOR, &IMMEDIATE, 2),
    OpCode::new(0x4a, &LSR, &IMPLIED, 2),
    OpCode::new(0x4b, &KIL, &IMPLIED, 0),
    OpCode::new(0x4c, &JMP, &ABSOLUTE, 3),
    OpCode::new(0x4d, &EOR, &ABSOLUTE, 4),
    OpCode::new(0x4e, &LSR, &ABSOLUTE, 6),
    OpCode::new(0x4f, &KIL, &IMPLIED, 0),
    OpCode::new(0x50, &BVC, &BRANCH, 2),
    OpCode::new(0x51, &EOR, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0x52, &KIL, &IMPLIED, 0),
    OpCode::new(0x53, &KIL, &IMPLIED, 0),
    OpCode::new(0x54, &KIL, &IMPLIED, 0),
    OpCode::new(0x55, &EOR, &ZERO_PAGE_X, 4),
    OpCode::new(0x56, &LSR, &ZERO_PAGE_X, 6),
    OpCode::new(0x57, &KIL, &IMPLIED, 0),
    OpCode::new(0x58, &CLI, &IMPLIED, 2),
    OpCode::new(0x59, &EOR, &ABSOLUTE_Y, 4),
    OpCode::new(0x5a, &KIL, &IMPLIED, 0),
    OpCode::new(0x5b, &KIL, &IMPLIED, 0),
    OpCode::new(0x5c, &KIL, &IMPLIED, 0),
    OpCode::new(0x5d, &EOR, &ABSOLUTE_X, 4),
    OpCode::new(0x5e, &LSR, &ABSOLUTE_X, 7),
    OpCode::new(0x5f, &KIL, &IMPLIED, 0),
    OpCode::new(0x60, &RTS, &IMPLIED, 6),
    OpCode::new(0x61, &ADC, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0x62, &KIL, &IMPLIED, 0),
    OpCode::new(0x63, &KIL, &IMPLIED, 0),
    OpCode::new(0x64, &KIL, &IMPLIED, 0),
    OpCode::new(0x65, &ADC, &ZERO_PAGE, 3),
    OpCode::new(0x66, &ROR, &ZERO_PAGE, 5),
    OpCode::new(0x67, &KIL, &IMPLIED, 0),
    OpCode::new(0x68, &PLA, &IMPLIED, 4),
    OpCode::new(0x69, &ADC, &IMMEDIATE, 2),
    OpCode::new(0x6a, &ROR, &IMPLIED, 2),
    OpCode::new(0x6b, &KIL, &IMPLIED, 0),
    OpCode::new(0x6c, &JMP, &INDIRECT, 5),
    OpCode::new(0x6d, &ADC, &ABSOLUTE, 4),
    OpCode::new(0x6e, &ROR, &ABSOLUTE, 6),
    OpCode::new(0x6f, &KIL, &IMPLIED, 0),
    OpCode::new(0x70, &BVS, &BRANCH, 2),
    OpCode::new(0x71, &ADC, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0x72, &KIL, &IMPLIED, 0),
    OpCode::new(0x73, &KIL, &IMPLIED, 0),
    OpCode::new(0x74, &KIL, &IMPLIED, 0),
    OpCode::new(0x75, &ADC, &ZERO_PAGE_X, 4),
    OpCode::new(0x76, &ROR, &ZERO_PAGE_X, 6),
    OpCode::new(0x77, &KIL, &IMPLIED, 0),
    OpCode::new(0x78, &SEI, &IMPLIED, 2),
    OpCode::new(0x79, &ADC, &ABSOLUTE_Y, 4),
    OpCode::new(0x7a, &KIL, &IMPLIED, 0),
    OpCode::new(0x7b, &KIL, &IMPLIED, 0),
    OpCode::new(0x7c, &KIL, &IMPLIED, 0),
    OpCode::new(0x7d, &ADC, &ABSOLUTE_X, 4),
    OpCode::new(0x7e, &ROR, &ABSOLUTE_X, 7),
    OpCode::new(0x7f, &KIL, &IMPLIED, 0),
    OpCode::new(0x80, &KIL, &IMPLIED, 0),
    OpCode::new(0x81, &STA, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0x82, &KIL, &IMPLIED, 0),
    OpCode::new(0x83, &KIL, &IMPLIED, 0),
    OpCode::new(0x84, &STY, &ZERO_PAGE, 3),
    OpCode::new(0x85, &STA, &ZERO_PAGE, 3),
    OpCode::new(0x86, &STX, &ZERO_PAGE, 3),
    OpCode::new(0x87, &KIL, &IMPLIED, 0),
    OpCode::new(0x88, &DEY, &IMPLIED, 2),
    OpCode::new(0x89, &KIL, &IMPLIED, 0),
    OpCode::new(0x8a, &TXA, &IMPLIED, 2),
    OpCode::new(0x8b, &KIL, &IMPLIED, 0),
    OpCode::new(0x8c, &STY, &ABSOLUTE, 4),
    OpCode::new(0x8d, &STA, &ABSOLUTE, 4),
    OpCode::new(0x8e, &STX, &ABSOLUTE, 4),
    OpCode::new(0x8f, &KIL, &IMPLIED, 0),
    OpCode::new(0x90, &BCC, &BRANCH, 2),
    OpCode::new(0x91, &STA, &INDIRECT_INDEXED_Y, 6),
    OpCode::new(0x92, &KIL, &IMPLIED, 0),
    OpCode::new(0x93, &KIL, &IMPLIED, 0),
    OpCode::new(0x94, &STY, &ZERO_PAGE_X, 4),
    OpCode::new(0x95, &STA, &ZERO_PAGE_X, 4),
    OpCode::new(0x96, &STX, &ZERO_PAGE_Y, 4),
    OpCode::new(0x97, &KIL, &IMPLIED, 0),
    OpCode::new(0x98, &TYA, &IMPLIED, 2),
    OpCode::new(0x99, &STA, &ABSOLUTE_Y, 5),
    OpCode::new(0x9a, &TXS, &IMPLIED, 2),
    OpCode::new(0x9b, &KIL, &IMPLIED, 0),
    OpCode::new(0x9c, &KIL, &IMPLIED, 0),
    OpCode::new(0x9d, &STA, &ABSOLUTE_X, 5),
    OpCode::new(0x9e, &KIL, &IMPLIED, 0),
    OpCode::new(0x9f, &KIL, &IMPLIED, 0),
    OpCode::new(0xa0, &LDY, &IMMEDIATE, 2),
    OpCode::new(0xa1, &LDA, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0xa2, &LDX, &IMMEDIATE, 2),
    OpCode::new(0xa3, &KIL, &IMPLIED, 0),
    OpCode::new(0xa4, &LDY, &ZERO_PAGE, 3),
    OpCode::new(0xa5, &LDA, &ZERO_PAGE, 3),
    OpCode::new(0xa6, &LDX, &ZERO_PAGE, 3),
    OpCode::new(0xa7, &KIL, &IMPLIED, 0),
    OpCode::new(0xa8, &TAY, &IMPLIED, 2),
    OpCode::new(0xa9, &LDA, &IMMEDIATE, 2),
    OpCode::new(0xaa, &TAX, &IMPLIED, 2),
    OpCode::new(0xab, &KIL, &IMPLIED, 0),
    OpCode::new(0xac, &LDY, &ABSOLUTE, 4),
    OpCode::new(0xad, &LDA, &ABSOLUTE, 4),
    OpCode::new(0xae, &LDX, &ABSOLUTE, 4),
    OpCode::new(0xaf, &KIL, &IMPLIED, 0),
    OpCode::new(0xb0, &BCS, &BRANCH, 2),
    OpCode::new(0xb1, &LDA, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0xb2, &KIL, &IMPLIED, 0),
    OpCode::new(0xb3, &KIL, &IMPLIED, 0),
    OpCode::new(0xb4, &LDY, &ZERO_PAGE_X, 4),
    OpCode::new(0xb5, &LDA, &ZERO_PAGE_X, 4),
    OpCode::new(0xb6, &LDX, &ZERO_PAGE_Y, 4),
    OpCode::new(0xb7, &KIL, &IMPLIED, 0),
    OpCode::new(0xb8, &CLV, &IMPLIED, 2),
    OpCode::new(0xb9, &LDA, &ABSOLUTE_Y, 4),
    OpCode::new(0xba, &TSX, &IMPLIED, 2),
    OpCode::new(0xbb, &KIL, &IMPLIED, 0),
    OpCode::new(0xbc, &LDY, &ABSOLUTE_X, 4),
    OpCode::new(0xbd, &LDA, &ABSOLUTE_X, 4),
    OpCode::new(0xbe, &LDX, &ABSOLUTE_Y, 4),
    OpCode::new(0xbf, &KIL, &IMPLIED, 0),
    OpCode::new(0xc0, &CPY, &IMMEDIATE, 2),
    OpCode::new(0xc1, &CMP, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0xc2, &KIL, &IMPLIED, 0),
    OpCode::new(0xc3, &KIL, &IMPLIED, 0),
    OpCode::new(0xc4, &CPY, &ZERO_PAGE, 3),
    OpCode::new(0xc5, &CMP, &ZERO_PAGE, 3),
    OpCode::new(0xc6, &DEC, &ZERO_PAGE, 5),
    OpCode::new(0xc7, &KIL, &IMPLIED, 0),
    OpCode::new(0xc8, &INY, &IMPLIED, 2),
    OpCode::new(0xc9, &CMP, &IMMEDIATE, 2),
    OpCode::new(0xca, &DEX, &IMPLIED, 2),
    OpCode::new(0xcb, &KIL, &IMPLIED, 0),
    OpCode::new(0xcc, &CPY, &ABSOLUTE, 4),
    OpCode::new(0xcd, &CMP, &ABSOLUTE, 4),
    OpCode::new(0xce, &DEC, &ABSOLUTE, 6),
    OpCode::new(0xcf, &KIL, &IMPLIED, 0),
    OpCode::new(0xd0, &BNE, &BRANCH, 2),
    OpCode::new(0xd1, &CMP, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0xd2, &KIL, &IMPLIED, 0),
    OpCode::new(0xd3, &KIL, &IMPLIED, 0),
    OpCode::new(0xd4, &KIL, &IMPLIED, 0),
    OpCode::new(0xd5, &CMP, &ZERO_PAGE_X, 4),
    OpCode::new(0xd6, &DEC, &ZERO_PAGE_X, 6),
    OpCode::new(0xd7, &KIL, &IMPLIED, 0),
    OpCode::new(0xd8, &CLD, &IMPLIED, 2),
    OpCode::new(0xd9, &CMP, &ABSOLUTE_Y, 4),
    OpCode::new(0xda, &KIL, &IMPLIED, 0),
    OpCode::new(0xdb, &KIL, &IMPLIED, 0),
    OpCode::new(0xdc, &KIL, &IMPLIED, 0),
    OpCode::new(0xdd, &KIL, &IMPLIED, 0),
    OpCode::new(0xde, &CMP, &ABSOLUTE_X, 4),
    OpCode::new(0xdf, &DEC, &ABSOLUTE_X, 7),
    OpCode::new(0xe0, &CPX, &IMMEDIATE, 2),
    OpCode::new(0xe1, &SBC, &INDEXED_INDIRECT_X, 6),
    OpCode::new(0xe2, &KIL, &IMPLIED, 0),
    OpCode::new(0xe3, &KIL, &IMPLIED, 0),
    OpCode::new(0xe4, &CPX, &ZERO_PAGE, 3),
    OpCode::new(0xe5, &SBC, &ZERO_PAGE, 3),
    OpCode::new(0xe6, &INC, &ZERO_PAGE, 5),
    OpCode::new(0xe7, &KIL, &IMPLIED, 0),
    OpCode::new(0xe8, &INX, &IMPLIED, 2),
    OpCode::new(0xe9, &SBC, &IMMEDIATE, 2),
    OpCode::new(0xea, &NOP, &IMPLIED, 2),
    OpCode::new(0xeb, &KIL, &IMPLIED, 0),
    OpCode::new(0xec, &CPX, &ABSOLUTE, 4),
    OpCode::new(0xed, &SBC, &ABSOLUTE, 4),
    OpCode::new(0xee, &INC, &ABSOLUTE, 6),
    OpCode::new(0xef, &KIL, &IMPLIED, 0),
    OpCode::new(0xf0, &BEQ, &BRANCH, 2),
    OpCode::new(0xf1, &SBC, &INDIRECT_INDEXED_Y, 5),
    OpCode::new(0xf2, &KIL, &IMPLIED, 0),
    OpCode::new(0xf3, &KIL, &IMPLIED, 0),
    OpCode::new(0xf4, &KIL, &IMPLIED, 0),
    OpCode::new(0xf5, &SBC, &ZERO_PAGE_X, 4),
    OpCode::new(0xf6, &INC, &ZERO_PAGE_X, 6),
    OpCode::new(0xf7, &KIL, &IMPLIED, 0),
    OpCode::new(0xf8, &SED, &IMPLIED, 2),
    OpCode::new(0xf9, &SBC, &ABSOLUTE_Y, 4),
    OpCode::new(0xfa, &KIL, &IMPLIED, 0),
    OpCode::new(0xfb, &KIL, &IMPLIED, 0),
    OpCode::new(0xfc, &KIL, &IMPLIED, 0),
    OpCode::new(0xfd, &SBC, &ABSOLUTE_X, 4),
    OpCode::new(0xfe, &INC, &ABSOLUTE_X, 7),
    OpCode::new(0xff, &KIL, &IMPLIED, 0),
];

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_find_opcode() {
        match find_opcode(&JMP, &ABSOLUTE) {
            Some(oc) => assert_eq!(oc.code, 0x4c),
            None => assert!(false, "opcode not found"),
        }
    }
}
