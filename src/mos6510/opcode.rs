use super::addrmode::AddrMode::{self, *};
use super::instruction::{Instruction::*, *};

pub struct OpCode {
    pub instruction: Instruction,
    pub addrmode: AddrMode,
    pub size: u8,
    pub cycles: u8,
}

impl OpCode {
    pub fn matches(&self, instruction: Instruction, addrmode: AddrMode) -> bool {
        match (self.instruction, self.addrmode) {
            (instruction, addrmode) => true,
            _ => false,
        }
    }
}

pub fn find_opcode(mnemonic: &str, addrmode: AddrMode) -> Option<&OpCode> {
    match find_instruction(mnemonic) {
        Some(instruction) => OPCODES.iter().find(|oc| oc.matches(instruction, addrmode)),
        None => None,
    }
}

const fn ins(instruction: Instruction, addrmode: AddrMode, cycles: u8) -> OpCode {
    OpCode {
        size: addrmode.operand_size() + 1,
        addrmode,
        instruction,
        cycles,
    }
}

const fn kil() -> OpCode {
    OpCode {
        instruction: KIL,
        addrmode: Implied,
        size: 1,
        cycles: 0,
    }
}

pub static OPCODES: [OpCode; 256] = [
    /* 0x00 */ ins(BRK, Implied, 7),
    /* 0x01 */ ins(ORA, IndexedIndirectX, 6),
    /* 0x02 */ kil(),
    /* 0x03 */ kil(),
    /* 0x04 */ kil(),
    /* 0x05 */ ins(ORA, ZeroPage, 3),
    /* 0x06 */ ins(ASL, ZeroPage, 5),
    /* 0x07 */ kil(),
    /* 0x08 */ ins(PHP, Implied, 3),
    /* 0x09 */ ins(ORA, Immediate, 2),
    /* 0x0a */ ins(ASL, Implied, 2),
    /* 0x0b */ kil(),
    /* 0x0c */ kil(),
    /* 0x0d */ ins(ORA, Absolute, 4),
    /* 0x0e */ ins(ASL, Absolute, 6),
    /* 0x0f */ kil(),
    /* 0x10 */ ins(BPL, Branch, 2),
    /* 0x11 */ ins(ORA, IndirectIndexedY, 5),
    /* 0x12 */ kil(),
    /* 0x13 */ kil(),
    /* 0x14 */ kil(),
    /* 0x15 */ ins(ORA, ZeroPageX, 4),
    /* 0x16 */ ins(ASL, ZeroPageX, 6),
    /* 0x17 */ kil(),
    /* 0x18 */ ins(CLC, Implied, 2),
    /* 0x19 */ ins(ORA, AbsoluteY, 4),
    /* 0x1a */ kil(),
    /* 0x1b */ kil(),
    /* 0x1c */ kil(),
    /* 0x1d */ ins(ORA, AbsoluteX, 4),
    /* 0x1e */ ins(ASL, AbsoluteX, 7),
    /* 0x1f */ kil(),
    /* 0x20 */ ins(JSR, Absolute, 6),
    /* 0x21 */ ins(AND, IndexedIndirectX, 6),
    /* 0x22 */ kil(),
    /* 0x23 */ kil(),
    /* 0x24 */ ins(BIT, ZeroPage, 3),
    /* 0x25 */ ins(AND, ZeroPage, 3),
    /* 0x26 */ ins(ROL, ZeroPage, 5),
    /* 0x27 */ kil(),
    /* 0x28 */ ins(PLP, Implied, 4),
    /* 0x29 */ ins(AND, Immediate, 2),
    /* 0x2a */ ins(ROL, Implied, 2),
    /* 0x2b */ kil(),
    /* 0x2c */ ins(BIT, Absolute, 4),
    /* 0x2d */ ins(AND, Absolute, 4),
    /* 0x2e */ ins(ROL, Absolute, 6),
    /* 0x2f */ kil(),
    /* 0x30 */ ins(BMI, Branch, 2),
    /* 0x31 */ ins(AND, IndirectIndexedY, 5),
    /* 0x32 */ kil(),
    /* 0x33 */ kil(),
    /* 0x34 */ kil(),
    /* 0x35 */ ins(AND, ZeroPageX, 4),
    /* 0x36 */ ins(ROL, ZeroPageX, 6),
    /* 0x37 */ kil(),
    /* 0x38 */ ins(SEC, Implied, 2),
    /* 0x39 */ ins(AND, AbsoluteY, 4),
    /* 0x3a */ kil(),
    /* 0x3b */ kil(),
    /* 0x3c */ kil(),
    /* 0x3d */ ins(AND, AbsoluteX, 4),
    /* 0x3e */ ins(ROL, AbsoluteX, 7),
    /* 0x3f */ kil(),
    /* 0x40 */ ins(RTI, Implied, 6),
    /* 0x41 */ ins(EOR, IndexedIndirectX, 6),
    /* 0x42 */ kil(),
    /* 0x43 */ kil(),
    /* 0x44 */ kil(),
    /* 0x45 */ ins(EOR, ZeroPage, 3),
    /* 0x46 */ ins(LSR, ZeroPage, 5),
    /* 0x47 */ kil(),
    /* 0x48 */ ins(PHA, Implied, 3),
    /* 0x49 */ ins(EOR, Immediate, 2),
    /* 0x4a */ ins(LSR, Implied, 2),
    /* 0x4b */ kil(),
    /* 0x4c */ ins(JMP, Absolute, 3),
    /* 0x4d */ ins(EOR, Absolute, 4),
    /* 0x4e */ ins(LSR, Absolute, 6),
    /* 0x4f */ kil(),
    /* 0x50 */ ins(BVC, Branch, 2),
    /* 0x51 */ ins(EOR, IndirectIndexedY, 5),
    /* 0x52 */ kil(),
    /* 0x53 */ kil(),
    /* 0x54 */ kil(),
    /* 0x55 */ ins(EOR, ZeroPageX, 4),
    /* 0x56 */ ins(LSR, ZeroPageX, 6),
    /* 0x57 */ kil(),
    /* 0x58 */ ins(CLI, Implied, 2),
    /* 0x59 */ ins(EOR, AbsoluteY, 4),
    /* 0x5a */ kil(),
    /* 0x5b */ kil(),
    /* 0x5c */ kil(),
    /* 0x5d */ ins(EOR, AbsoluteX, 4),
    /* 0x5e */ ins(LSR, AbsoluteX, 7),
    /* 0x5f */ kil(),
    /* 0x60 */ ins(RTS, Implied, 6),
    /* 0x61 */ ins(ADC, IndexedIndirectX, 6),
    /* 0x62 */ kil(),
    /* 0x63 */ kil(),
    /* 0x64 */ kil(),
    /* 0x65 */ ins(ADC, ZeroPage, 3),
    /* 0x66 */ ins(ROR, ZeroPage, 5),
    /* 0x67 */ kil(),
    /* 0x68 */ ins(PLA, Implied, 4),
    /* 0x69 */ ins(ADC, Immediate, 2),
    /* 0x6a */ ins(ROR, Implied, 2),
    /* 0x6b */ kil(),
    /* 0x6c */ ins(JMP, Indirect, 5),
    /* 0x6d */ ins(ADC, Absolute, 4),
    /* 0x6e */ ins(ROR, Absolute, 6),
    /* 0x6f */ kil(),
    /* 0x70 */ ins(BVS, Branch, 2),
    /* 0x71 */ ins(ADC, IndirectIndexedY, 5),
    /* 0x72 */ kil(),
    /* 0x73 */ kil(),
    /* 0x74 */ kil(),
    /* 0x75 */ ins(ADC, ZeroPageX, 4),
    /* 0x76 */ ins(ROR, ZeroPageX, 6),
    /* 0x77 */ kil(),
    /* 0x78 */ ins(SEI, Implied, 2),
    /* 0x79 */ ins(ADC, AbsoluteY, 4),
    /* 0x7a */ kil(),
    /* 0x7b */ kil(),
    /* 0x7c */ kil(),
    /* 0x7d */ ins(ADC, AbsoluteX, 4),
    /* 0x7e */ ins(ROR, AbsoluteX, 7),
    /* 0x7f */ kil(),
    /* 0x80 */ kil(),
    /* 0x81 */ ins(STA, IndexedIndirectX, 6),
    /* 0x82 */ kil(),
    /* 0x83 */ kil(),
    /* 0x84 */ ins(STY, ZeroPage, 3),
    /* 0x85 */ ins(STA, ZeroPage, 3),
    /* 0x86 */ ins(STX, ZeroPage, 3),
    /* 0x87 */ kil(),
    /* 0x88 */ ins(DEY, Implied, 2),
    /* 0x89 */ kil(),
    /* 0x8a */ ins(TXA, Implied, 2),
    /* 0x8b */ kil(),
    /* 0x8c */ ins(STY, Absolute, 4),
    /* 0x8d */ ins(STA, Absolute, 4),
    /* 0x8e */ ins(STX, Absolute, 4),
    /* 0x8f */ kil(),
    /* 0x90 */ ins(BCC, Branch, 2),
    /* 0x91 */ ins(STA, IndirectIndexedY, 6),
    /* 0x92 */ kil(),
    /* 0x93 */ kil(),
    /* 0x94 */ ins(STY, ZeroPageX, 4),
    /* 0x95 */ ins(STA, ZeroPageX, 4),
    /* 0x96 */ ins(STX, ZeroPageY, 4),
    /* 0x97 */ kil(),
    /* 0x98 */ ins(TYA, Implied, 2),
    /* 0x99 */ ins(STA, AbsoluteY, 5),
    /* 0x9a */ ins(TXS, Implied, 2),
    /* 0x9b */ kil(),
    /* 0x9c */ kil(),
    /* 0x9d */ ins(STA, AbsoluteX, 5),
    /* 0x9e */ kil(),
    /* 0x9f */ kil(),
    /* 0xa0 */ ins(LDY, Immediate, 2),
    /* 0xa1 */ ins(LDA, IndexedIndirectX, 6),
    /* 0xa2 */ ins(LDX, Immediate, 2),
    /* 0xa3 */ kil(),
    /* 0xa4 */ ins(LDY, ZeroPage, 3),
    /* 0xa5 */ ins(LDA, ZeroPage, 3),
    /* 0xa6 */ ins(LDX, ZeroPage, 3),
    /* 0xa7 */ kil(),
    /* 0xa8 */ ins(TAY, Implied, 2),
    /* 0xa9 */ ins(LDA, Immediate, 2),
    /* 0xaa */ ins(TAX, Implied, 2),
    /* 0xab */ kil(),
    /* 0xac */ ins(LDY, Absolute, 4),
    /* 0xad */ ins(LDA, Absolute, 4),
    /* 0xae */ ins(LDX, Absolute, 4),
    /* 0xaf */ kil(),
    /* 0xb0 */ ins(BCS, Branch, 2),
    /* 0xb1 */ ins(LDA, IndirectIndexedY, 5),
    /* 0xb2 */ kil(),
    /* 0xb3 */ kil(),
    /* 0xb4 */ ins(LDY, ZeroPageX, 4),
    /* 0xb5 */ ins(LDA, ZeroPageX, 4),
    /* 0xb6 */ ins(LDX, ZeroPageY, 4),
    /* 0xb7 */ kil(),
    /* 0xb8 */ ins(CLV, Implied, 2),
    /* 0xb9 */ ins(LDA, AbsoluteY, 4),
    /* 0xba */ ins(TSX, Implied, 2),
    /* 0xbb */ kil(),
    /* 0xbc */ ins(LDY, AbsoluteX, 4),
    /* 0xbd */ ins(LDA, AbsoluteX, 4),
    /* 0xbe */ ins(LDX, AbsoluteY, 4),
    /* 0xbf */ kil(),
    /* 0xc0 */ ins(CPY, Immediate, 2),
    /* 0xc1 */ ins(CMP, IndexedIndirectX, 6),
    /* 0xc2 */ kil(),
    /* 0xc3 */ kil(),
    /* 0xc4 */ ins(CPY, ZeroPage, 3),
    /* 0xc5 */ ins(CMP, ZeroPage, 3),
    /* 0xc6 */ ins(DEC, ZeroPage, 5),
    /* 0xc7 */ kil(),
    /* 0xc8 */ ins(INY, Implied, 2),
    /* 0xc9 */ ins(CMP, Immediate, 2),
    /* 0xca */ ins(DEX, Implied, 2),
    /* 0xcb */ kil(),
    /* 0xcc */ ins(CPY, Absolute, 4),
    /* 0xcd */ ins(CMP, Absolute, 4),
    /* 0xce */ ins(DEC, Absolute, 6),
    /* 0xcf */ kil(),
    /* 0xd0 */ ins(BNE, Branch, 2),
    /* 0xd1 */ ins(CMP, IndirectIndexedY, 5),
    /* 0xd2 */ kil(),
    /* 0xd3 */ kil(),
    /* 0xd4 */ kil(),
    /* 0xd5 */ ins(CMP, ZeroPageX, 4),
    /* 0xd6 */ ins(DEC, ZeroPageX, 6),
    /* 0xd7 */ kil(),
    /* 0xd8 */ ins(CLD, Implied, 2),
    /* 0xd9 */ ins(CMP, AbsoluteY, 4),
    /* 0xda */ kil(),
    /* 0xdb */ kil(),
    /* 0xdc */ kil(),
    /* 0xdd */ kil(),
    /* 0xde */ ins(CMP, AbsoluteX, 4),
    /* 0xdf */ ins(DEC, AbsoluteX, 7),
    /* 0xe0 */ ins(CPX, Immediate, 2),
    /* 0xe1 */ ins(SBC, IndexedIndirectX, 6),
    /* 0xe2 */ kil(),
    /* 0xe3 */ kil(),
    /* 0xe4 */ ins(CPX, ZeroPage, 3),
    /* 0xe5 */ ins(SBC, ZeroPage, 3),
    /* 0xe6 */ ins(INC, ZeroPage, 5),
    /* 0xe7 */ kil(),
    /* 0xe8 */ ins(INX, Implied, 2),
    /* 0xe9 */ ins(SBC, Immediate, 2),
    /* 0xea */ ins(NOP, Implied, 2),
    /* 0xeb */ kil(),
    /* 0xec */ ins(CPX, Absolute, 4),
    /* 0xed */ ins(SBC, Absolute, 4),
    /* 0xee */ ins(INC, Absolute, 6),
    /* 0xef */ kil(),
    /* 0xf0 */ ins(BEQ, Branch, 2),
    /* 0xf1 */ ins(SBC, IndirectIndexedY, 5),
    /* 0xf2 */ kil(),
    /* 0xf3 */ kil(),
    /* 0xf4 */ kil(),
    /* 0xf5 */ ins(SBC, ZeroPageX, 4),
    /* 0xf6 */ ins(INC, ZeroPageX, 6),
    /* 0xf7 */ kil(),
    /* 0xf8 */ ins(SED, Implied, 2),
    /* 0xf9 */ ins(SBC, AbsoluteY, 4),
    /* 0xfa */ kil(),
    /* 0xfb */ kil(),
    /* 0xfc */ kil(),
    /* 0xfd */ ins(SBC, AbsoluteX, 4),
    /* 0xfe */ ins(INC, AbsoluteX, 7),
    /* 0xff */ kil(),
];
