use super::addrmode::AddrMode::{self, *};
use super::instruction::{Instruction::*, *};

pub struct OpCode {
    pub code: u8,
    pub instruction: Instruction,
    pub addrmode: AddrMode,
    pub size: u8,
    pub cycles: u8,
}

impl OpCode {
    pub fn matches(&self, instruction: Instruction, addrmode: AddrMode) -> bool {
        match (self.instruction, self.addrmode) {
            (instruction, addrmode) => true,
            _ => false,
        }
    }
}

pub fn find_opcode(instruction: Instruction, addrmode: AddrMode) -> Option<&'static OpCode> {
    OPCODES.iter().find(|oc| oc.matches(instruction, addrmode))
}

const fn ins(code: u8, instruction: Instruction, addrmode: AddrMode, cycles: u8) -> OpCode {
    OpCode {
        code,
        size: addrmode.operand_size() + 1,
        addrmode,
        instruction,
        cycles,
    }
}

const fn kil(code: u8) -> OpCode {
    OpCode {
        code,
        instruction: KIL,
        addrmode: Implied,
        size: 1,
        cycles: 0,
    }
}

pub static OPCODES: [OpCode; 256] = [
    ins(0x00, BRK, Implied, 7),
    ins(0x01, ORA, IndexedIndirectX, 6),
    kil(0x02),
    kil(0x03),
    kil(0x04),
    ins(0x05, ORA, ZeroPage, 3),
    ins(0x06, ASL, ZeroPage, 5),
    kil(0x07),
    ins(0x08, PHP, Implied, 3),
    ins(0x09, ORA, Immediate, 2),
    ins(0x0a, ASL, Implied, 2),
    kil(0x0b),
    kil(0x0c),
    ins(0x0d, ORA, Absolute, 4),
    ins(0x0e, ASL, Absolute, 6),
    kil(0x0f),
    ins(0x10, BPL, Branch, 2),
    ins(0x11, ORA, IndirectIndexedY, 5),
    kil(0x12),
    kil(0x13),
    kil(0x14),
    ins(0x15, ORA, ZeroPageX, 4),
    ins(0x16, ASL, ZeroPageX, 6),
    kil(0x17),
    ins(0x18, CLC, Implied, 2),
    ins(0x19, ORA, AbsoluteY, 4),
    kil(0x1a),
    kil(0x1b),
    kil(0x1c),
    ins(0x1d, ORA, AbsoluteX, 4),
    ins(0x1e, ASL, AbsoluteX, 7),
    kil(0x1f),
    ins(0x20, JSR, Absolute, 6),
    ins(0x21, AND, IndexedIndirectX, 6),
    kil(0x22),
    kil(0x23),
    ins(0x24, BIT, ZeroPage, 3),
    ins(0x25, AND, ZeroPage, 3),
    ins(0x26, ROL, ZeroPage, 5),
    kil(0x27),
    ins(0x28, PLP, Implied, 4),
    ins(0x29, AND, Immediate, 2),
    ins(0x2a, ROL, Implied, 2),
    kil(0x2b),
    ins(0x2c, BIT, Absolute, 4),
    ins(0x2d, AND, Absolute, 4),
    ins(0x2e, ROL, Absolute, 6),
    kil(0x2f),
    ins(0x30, BMI, Branch, 2),
    ins(0x31, AND, IndirectIndexedY, 5),
    kil(0x32),
    kil(0x33),
    kil(0x34),
    ins(0x35, AND, ZeroPageX, 4),
    ins(0x36, ROL, ZeroPageX, 6),
    kil(0x37),
    ins(0x38, SEC, Implied, 2),
    ins(0x39, AND, AbsoluteY, 4),
    kil(0x3a),
    kil(0x3b),
    kil(0x3c),
    ins(0x3d, AND, AbsoluteX, 4),
    ins(0x3e, ROL, AbsoluteX, 7),
    kil(0x3f),
    ins(0x40, RTI, Implied, 6),
    ins(0x41, EOR, IndexedIndirectX, 6),
    kil(0x42),
    kil(0x43),
    kil(0x44),
    ins(0x45, EOR, ZeroPage, 3),
    ins(0x46, LSR, ZeroPage, 5),
    kil(0x47),
    ins(0x48, PHA, Implied, 3),
    ins(0x49, EOR, Immediate, 2),
    ins(0x4a, LSR, Implied, 2),
    kil(0x4b),
    ins(0x4c, JMP, Absolute, 3),
    ins(0x4d, EOR, Absolute, 4),
    ins(0x4e, LSR, Absolute, 6),
    kil(0x4f),
    ins(0x50, BVC, Branch, 2),
    ins(0x51, EOR, IndirectIndexedY, 5),
    kil(0x52),
    kil(0x53),
    kil(0x54),
    ins(0x55, EOR, ZeroPageX, 4),
    ins(0x56, LSR, ZeroPageX, 6),
    kil(0x57),
    ins(0x58, CLI, Implied, 2),
    ins(0x59, EOR, AbsoluteY, 4),
    kil(0x5a),
    kil(0x5b),
    kil(0x5c),
    ins(0x5d, EOR, AbsoluteX, 4),
    ins(0x5e, LSR, AbsoluteX, 7),
    kil(0x5f),
    ins(0x60, RTS, Implied, 6),
    ins(0x61, ADC, IndexedIndirectX, 6),
    kil(0x62),
    kil(0x63),
    kil(0x64),
    ins(0x65, ADC, ZeroPage, 3),
    ins(0x66, ROR, ZeroPage, 5),
    kil(0x67),
    ins(0x68, PLA, Implied, 4),
    ins(0x69, ADC, Immediate, 2),
    ins(0x6a, ROR, Implied, 2),
    kil(0x6b),
    ins(0x6c, JMP, Indirect, 5),
    ins(0x6d, ADC, Absolute, 4),
    ins(0x6e, ROR, Absolute, 6),
    kil(0x6f),
    ins(0x70, BVS, Branch, 2),
    ins(0x71, ADC, IndirectIndexedY, 5),
    kil(0x72),
    kil(0x73),
    kil(0x74),
    ins(0x75, ADC, ZeroPageX, 4),
    ins(0x76, ROR, ZeroPageX, 6),
    kil(0x77),
    ins(0x78, SEI, Implied, 2),
    ins(0x79, ADC, AbsoluteY, 4),
    kil(0x7a),
    kil(0x7b),
    kil(0x7c),
    ins(0x7d, ADC, AbsoluteX, 4),
    ins(0x7e, ROR, AbsoluteX, 7),
    kil(0x7f),
    kil(0x80),
    ins(0x81, STA, IndexedIndirectX, 6),
    kil(0x82),
    kil(0x83),
    ins(0x84, STY, ZeroPage, 3),
    ins(0x85, STA, ZeroPage, 3),
    ins(0x86, STX, ZeroPage, 3),
    kil(0x87),
    ins(0x88, DEY, Implied, 2),
    kil(0x89),
    ins(0x8a, TXA, Implied, 2),
    kil(0x8b),
    ins(0x8c, STY, Absolute, 4),
    ins(0x8d, STA, Absolute, 4),
    ins(0x8e, STX, Absolute, 4),
    kil(0x8f),
    ins(0x90, BCC, Branch, 2),
    ins(0x91, STA, IndirectIndexedY, 6),
    kil(0x92),
    kil(0x93),
    ins(0x94, STY, ZeroPageX, 4),
    ins(0x95, STA, ZeroPageX, 4),
    ins(0x96, STX, ZeroPageY, 4),
    kil(0x97),
    ins(0x98, TYA, Implied, 2),
    ins(0x99, STA, AbsoluteY, 5),
    ins(0x9a, TXS, Implied, 2),
    kil(0x9b),
    kil(0x9c),
    ins(0x9d, STA, AbsoluteX, 5),
    kil(0x9e),
    kil(0x9f),
    ins(0xa0, LDY, Immediate, 2),
    ins(0xa1, LDA, IndexedIndirectX, 6),
    ins(0xa2, LDX, Immediate, 2),
    kil(0xa3),
    ins(0xa4, LDY, ZeroPage, 3),
    ins(0xa5, LDA, ZeroPage, 3),
    ins(0xa6, LDX, ZeroPage, 3),
    kil(0xa7),
    ins(0xa8, TAY, Implied, 2),
    ins(0xa9, LDA, Immediate, 2),
    ins(0xaa, TAX, Implied, 2),
    kil(0xab),
    ins(0xac, LDY, Absolute, 4),
    ins(0xad, LDA, Absolute, 4),
    ins(0xae, LDX, Absolute, 4),
    kil(0xaf),
    ins(0xb0, BCS, Branch, 2),
    ins(0xb1, LDA, IndirectIndexedY, 5),
    kil(0xb2),
    kil(0xb3),
    ins(0xb4, LDY, ZeroPageX, 4),
    ins(0xb5, LDA, ZeroPageX, 4),
    ins(0xb6, LDX, ZeroPageY, 4),
    kil(0xb7),
    ins(0xb8, CLV, Implied, 2),
    ins(0xb9, LDA, AbsoluteY, 4),
    ins(0xba, TSX, Implied, 2),
    kil(0xbb),
    ins(0xbc, LDY, AbsoluteX, 4),
    ins(0xbd, LDA, AbsoluteX, 4),
    ins(0xbe, LDX, AbsoluteY, 4),
    kil(0xbf),
    ins(0xc0, CPY, Immediate, 2),
    ins(0xc1, CMP, IndexedIndirectX, 6),
    kil(0xc2),
    kil(0xc3),
    ins(0xc4, CPY, ZeroPage, 3),
    ins(0xc5, CMP, ZeroPage, 3),
    ins(0xc6, DEC, ZeroPage, 5),
    kil(0xc7),
    ins(0xc8, INY, Implied, 2),
    ins(0xc9, CMP, Immediate, 2),
    ins(0xca, DEX, Implied, 2),
    kil(0xcb),
    ins(0xcc, CPY, Absolute, 4),
    ins(0xcd, CMP, Absolute, 4),
    ins(0xce, DEC, Absolute, 6),
    kil(0xcf),
    ins(0xd0, BNE, Branch, 2),
    ins(0xd1, CMP, IndirectIndexedY, 5),
    kil(0xd2),
    kil(0xd3),
    kil(0xd4),
    ins(0xd5, CMP, ZeroPageX, 4),
    ins(0xd6, DEC, ZeroPageX, 6),
    kil(0xd7),
    ins(0xd8, CLD, Implied, 2),
    ins(0xd9, CMP, AbsoluteY, 4),
    kil(0xda),
    kil(0xdb),
    kil(0xdc),
    kil(0xdd),
    ins(0xde, CMP, AbsoluteX, 4),
    ins(0xdf, DEC, AbsoluteX, 7),
    ins(0xe0, CPX, Immediate, 2),
    ins(0xe1, SBC, IndexedIndirectX, 6),
    kil(0xe2),
    kil(0xe3),
    ins(0xe4, CPX, ZeroPage, 3),
    ins(0xe5, SBC, ZeroPage, 3),
    ins(0xe6, INC, ZeroPage, 5),
    kil(0xe7),
    ins(0xe8, INX, Implied, 2),
    ins(0xe9, SBC, Immediate, 2),
    ins(0xea, NOP, Implied, 2),
    kil(0xeb),
    ins(0xec, CPX, Absolute, 4),
    ins(0xed, SBC, Absolute, 4),
    ins(0xee, INC, Absolute, 6),
    kil(0xef),
    ins(0xf0, BEQ, Branch, 2),
    ins(0xf1, SBC, IndirectIndexedY, 5),
    kil(0xf2),
    kil(0xf3),
    kil(0xf4),
    ins(0xf5, SBC, ZeroPageX, 4),
    ins(0xf6, INC, ZeroPageX, 6),
    kil(0xf7),
    ins(0xf8, SED, Implied, 2),
    ins(0xf9, SBC, AbsoluteY, 4),
    kil(0xfa),
    kil(0xfb),
    kil(0xfc),
    ins(0xfd, SBC, AbsoluteX, 4),
    ins(0xfe, INC, AbsoluteX, 7),
    kil(0xff),
];
